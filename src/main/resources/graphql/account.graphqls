type BankAccountEventId {
    customerId: String
    accountId: String
    eventId: String
}

type BankAccountId {
    customerId: String!
    accountId: String!
}

input IdBankAccount {
    customerId: String!
    accountId: String!
}


enum EventTransactionTypeEnum {
    DEPOSIT
    WITHDRAWN
}

type BankAccountEvent {
    id: BankAccountEventId
    type: EventTransactionTypeEnum
    date: String
    value: Float
}

type BankAccountTransactions {
    items: [BankAccountEvent]
}

type BankAccount {
    id: BankAccountId!
    since: String
    expiredAt: String
    transactions: BankAccountTransactions
}

type Query {
    findAccountAll: [BankAccount]
    findAccountById(bankAccountId: IdBankAccount): BankAccount
}