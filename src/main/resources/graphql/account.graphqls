type BankAccountEventId {
    customerId: String
    accountId: String
    eventId: String
}

type BankAccountId {
    customerId: String!
    accountId: String!
}

input IdBankAccount {
    customerId: String!
    accountId: String!
}


enum EventTransactionTypeEnum {
    DEPOSIT
    WITHDRAWN
}

type BankAccountEvent {
    id: BankAccountEventId
    type: EventTransactionTypeEnum
    date: String
    value: Float
}

type BankAccountTransactions {
    items: [BankAccountEvent]
}

type BankAccount {
    id: BankAccountId!
    since: String
    expiredAt: String
    transactions: BankAccountTransactions
}

type Query {
    findAccountAll: [BankAccount]
    findAccountById(bankAccountId: IdBankAccount): BankAccount
}

type Mutation {
    addBankAccount(customerId: String!, accountId: String!, since: String, expiredAt: String) : BankAccount
    updateBankAccount(customerId: String!, accountId: String!, since: String, expiredAt: String) : BankAccount
    deleteBankAccount(customerId: String!, accountId: String!) : BankAccount
    addBankAccountEvent(customerId: String!, accountId: String!, eventId: String!, type: EventTransactionTypeEnum, date: String, value: Float) : BankAccountEvent
    updateBankAccountEvent(customerId: String!, accountId: String!, eventId: String!, type: EventTransactionTypeEnum, date: String, value: Float) : BankAccountEvent
    deleteBankAccountEvent(customerId: String!, accountId: String!, eventId: String!) : BankAccountEvent
}